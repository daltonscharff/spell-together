/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export type paths = {
  "/": {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/correct_guess": {
    get: {
      parameters: {
        query: {
          guess_id?: parameters["rowFilter.correct_guess.guess_id"];
          created_at?: parameters["rowFilter.correct_guess.created_at"];
          is_correct?: parameters["rowFilter.correct_guess.is_correct"];
          username?: parameters["rowFilter.correct_guess.username"];
          puzzle_id?: parameters["rowFilter.correct_guess.puzzle_id"];
          room_id?: parameters["rowFilter.correct_guess.room_id"];
          word_id?: parameters["rowFilter.correct_guess.word_id"];
          word?: parameters["rowFilter.correct_guess.word"];
          point_value?: parameters["rowFilter.correct_guess.point_value"];
          is_pangram?: parameters["rowFilter.correct_guess.is_pangram"];
          definition?: parameters["rowFilter.correct_guess.definition"];
          part_of_speech?: parameters["rowFilter.correct_guess.part_of_speech"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["correct_guess"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
  };
  "/guess": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.guess.id"];
          created_at?: parameters["rowFilter.guess.created_at"];
          is_correct?: parameters["rowFilter.guess.is_correct"];
          username?: parameters["rowFilter.guess.username"];
          room_id?: parameters["rowFilter.guess.room_id"];
          word_id?: parameters["rowFilter.guess.word_id"];
          puzzle_id?: parameters["rowFilter.guess.puzzle_id"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["guess"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** guess */
          guess?: definitions["guess"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.guess.id"];
          created_at?: parameters["rowFilter.guess.created_at"];
          is_correct?: parameters["rowFilter.guess.is_correct"];
          username?: parameters["rowFilter.guess.username"];
          room_id?: parameters["rowFilter.guess.room_id"];
          word_id?: parameters["rowFilter.guess.word_id"];
          puzzle_id?: parameters["rowFilter.guess.puzzle_id"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.guess.id"];
          created_at?: parameters["rowFilter.guess.created_at"];
          is_correct?: parameters["rowFilter.guess.is_correct"];
          username?: parameters["rowFilter.guess.username"];
          room_id?: parameters["rowFilter.guess.room_id"];
          word_id?: parameters["rowFilter.guess.word_id"];
          puzzle_id?: parameters["rowFilter.guess.puzzle_id"];
        };
        body: {
          /** guess */
          guess?: definitions["guess"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/newest_puzzle": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.newest_puzzle.id"];
          created_at?: parameters["rowFilter.newest_puzzle.created_at"];
          date?: parameters["rowFilter.newest_puzzle.date"];
          outer_letters?: parameters["rowFilter.newest_puzzle.outer_letters"];
          center_letter?: parameters["rowFilter.newest_puzzle.center_letter"];
          max_score?: parameters["rowFilter.newest_puzzle.max_score"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["newest_puzzle"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** newest_puzzle */
          newest_puzzle?: definitions["newest_puzzle"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.newest_puzzle.id"];
          created_at?: parameters["rowFilter.newest_puzzle.created_at"];
          date?: parameters["rowFilter.newest_puzzle.date"];
          outer_letters?: parameters["rowFilter.newest_puzzle.outer_letters"];
          center_letter?: parameters["rowFilter.newest_puzzle.center_letter"];
          max_score?: parameters["rowFilter.newest_puzzle.max_score"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.newest_puzzle.id"];
          created_at?: parameters["rowFilter.newest_puzzle.created_at"];
          date?: parameters["rowFilter.newest_puzzle.date"];
          outer_letters?: parameters["rowFilter.newest_puzzle.outer_letters"];
          center_letter?: parameters["rowFilter.newest_puzzle.center_letter"];
          max_score?: parameters["rowFilter.newest_puzzle.max_score"];
        };
        body: {
          /** newest_puzzle */
          newest_puzzle?: definitions["newest_puzzle"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/puzzle": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.puzzle.id"];
          created_at?: parameters["rowFilter.puzzle.created_at"];
          date?: parameters["rowFilter.puzzle.date"];
          outer_letters?: parameters["rowFilter.puzzle.outer_letters"];
          center_letter?: parameters["rowFilter.puzzle.center_letter"];
          max_score?: parameters["rowFilter.puzzle.max_score"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["puzzle"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** puzzle */
          puzzle?: definitions["puzzle"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.puzzle.id"];
          created_at?: parameters["rowFilter.puzzle.created_at"];
          date?: parameters["rowFilter.puzzle.date"];
          outer_letters?: parameters["rowFilter.puzzle.outer_letters"];
          center_letter?: parameters["rowFilter.puzzle.center_letter"];
          max_score?: parameters["rowFilter.puzzle.max_score"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.puzzle.id"];
          created_at?: parameters["rowFilter.puzzle.created_at"];
          date?: parameters["rowFilter.puzzle.date"];
          outer_letters?: parameters["rowFilter.puzzle.outer_letters"];
          center_letter?: parameters["rowFilter.puzzle.center_letter"];
          max_score?: parameters["rowFilter.puzzle.max_score"];
        };
        body: {
          /** puzzle */
          puzzle?: definitions["puzzle"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/room": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.room.id"];
          created_at?: parameters["rowFilter.room.created_at"];
          last_played?: parameters["rowFilter.room.last_played"];
          shortcode?: parameters["rowFilter.room.shortcode"];
          name?: parameters["rowFilter.room.name"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["room"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** room */
          room?: definitions["room"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.room.id"];
          created_at?: parameters["rowFilter.room.created_at"];
          last_played?: parameters["rowFilter.room.last_played"];
          shortcode?: parameters["rowFilter.room.shortcode"];
          name?: parameters["rowFilter.room.name"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.room.id"];
          created_at?: parameters["rowFilter.room.created_at"];
          last_played?: parameters["rowFilter.room.last_played"];
          shortcode?: parameters["rowFilter.room.shortcode"];
          name?: parameters["rowFilter.room.name"];
        };
        body: {
          /** room */
          room?: definitions["room"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/word": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.word.id"];
          created_at?: parameters["rowFilter.word.created_at"];
          word?: parameters["rowFilter.word.word"];
          point_value?: parameters["rowFilter.word.point_value"];
          is_pangram?: parameters["rowFilter.word.is_pangram"];
          definition?: parameters["rowFilter.word.definition"];
          part_of_speech?: parameters["rowFilter.word.part_of_speech"];
          puzzle_id?: parameters["rowFilter.word.puzzle_id"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["word"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** word */
          word?: definitions["word"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.word.id"];
          created_at?: parameters["rowFilter.word.created_at"];
          word?: parameters["rowFilter.word.word"];
          point_value?: parameters["rowFilter.word.point_value"];
          is_pangram?: parameters["rowFilter.word.is_pangram"];
          definition?: parameters["rowFilter.word.definition"];
          part_of_speech?: parameters["rowFilter.word.part_of_speech"];
          puzzle_id?: parameters["rowFilter.word.puzzle_id"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.word.id"];
          created_at?: parameters["rowFilter.word.created_at"];
          word?: parameters["rowFilter.word.word"];
          point_value?: parameters["rowFilter.word.point_value"];
          is_pangram?: parameters["rowFilter.word.is_pangram"];
          definition?: parameters["rowFilter.word.definition"];
          part_of_speech?: parameters["rowFilter.word.part_of_speech"];
          puzzle_id?: parameters["rowFilter.word.puzzle_id"];
        };
        body: {
          /** word */
          word?: definitions["word"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/rpc/generate_shortcode": {
    post: {
      parameters: {
        body: {
          args: {
            /** Format: integer */
            _length: number;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/submit_guess": {
    post: {
      parameters: {
        body: {
          args: {
            /** Format: uuid */
            _puzzle_id: string;
            /** Format: character varying */
            _username: string;
            /** Format: uuid */
            _room_id: string;
            /** Format: character varying */
            _word: string;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/newest_puzzle_id": {
    post: {
      parameters: {
        body: {
          args: { [key: string]: unknown };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
};

export type definitions = {
  correct_guess: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    guess_id?: string;
    /** Format: timestamp with time zone */
    created_at?: string;
    /** Format: boolean */
    is_correct?: boolean;
    /** Format: character varying */
    username?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `puzzle.id`.<fk table='puzzle' column='id'/>
     */
    puzzle_id?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `room.id`.<fk table='room' column='id'/>
     */
    room_id?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    word_id?: string;
    /** Format: character varying */
    word?: string;
    /** Format: smallint */
    point_value?: number;
    /** Format: boolean */
    is_pangram?: boolean;
    /** Format: text */
    definition?: string;
    /** Format: character varying */
    part_of_speech?: string;
  };
  guess: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at: string;
    /** Format: boolean */
    is_correct: boolean;
    /** Format: character varying */
    username: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `room.id`.<fk table='room' column='id'/>
     */
    room_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `word.id`.<fk table='word' column='id'/>
     */
    word_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `puzzle.id`.<fk table='puzzle' column='id'/>
     */
    puzzle_id: string;
  };
  newest_puzzle: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id?: string;
    /** Format: timestamp with time zone */
    created_at?: string;
    /** Format: date */
    date?: string;
    /** Format: ARRAY */
    outer_letters?: string[];
    /** Format: character */
    center_letter?: string;
    /** Format: smallint */
    max_score?: number;
  };
  puzzle: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at: string;
    /**
     * Format: date
     * @default now()
     */
    date: string;
    /** Format: ARRAY */
    outer_letters: string[];
    /** Format: character */
    center_letter: string;
    /** Format: smallint */
    max_score: number;
  };
  room: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    last_played: string;
    /**
     * Format: character varying
     * @default public.generate_shortcode(6)
     */
    shortcode: string;
    /** Format: character varying */
    name?: string;
  };
  word: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at: string;
    /** Format: character varying */
    word: string;
    /** Format: smallint */
    point_value: number;
    /** Format: boolean */
    is_pangram: boolean;
    /** Format: text */
    definition?: string;
    /** Format: character varying */
    part_of_speech?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `puzzle.id`.<fk table='puzzle' column='id'/>
     */
    puzzle_id: string;
  };
};

export type parameters = {
  /**
   * @description Preference
   * @enum {string}
   */
  preferParams: "params=single-object";
  /**
   * @description Preference
   * @enum {string}
   */
  preferReturn: "return=representation" | "return=minimal" | "return=none";
  /**
   * @description Preference
   * @enum {string}
   */
  preferCount: "count=none";
  /** @description Filtering Columns */
  select: string;
  /** @description On Conflict */
  on_conflict: string;
  /** @description Ordering */
  order: string;
  /** @description Limiting and Pagination */
  range: string;
  /**
   * @description Limiting and Pagination
   * @default items
   */
  rangeUnit: string;
  /** @description Limiting and Pagination */
  offset: string;
  /** @description Limiting and Pagination */
  limit: string;
  /** @description correct_guess */
  "body.correct_guess": definitions["correct_guess"];
  /** Format: uuid */
  "rowFilter.correct_guess.guess_id": string;
  /** Format: timestamp with time zone */
  "rowFilter.correct_guess.created_at": string;
  /** Format: boolean */
  "rowFilter.correct_guess.is_correct": string;
  /** Format: character varying */
  "rowFilter.correct_guess.username": string;
  /** Format: uuid */
  "rowFilter.correct_guess.puzzle_id": string;
  /** Format: uuid */
  "rowFilter.correct_guess.room_id": string;
  /** Format: uuid */
  "rowFilter.correct_guess.word_id": string;
  /** Format: character varying */
  "rowFilter.correct_guess.word": string;
  /** Format: smallint */
  "rowFilter.correct_guess.point_value": string;
  /** Format: boolean */
  "rowFilter.correct_guess.is_pangram": string;
  /** Format: text */
  "rowFilter.correct_guess.definition": string;
  /** Format: character varying */
  "rowFilter.correct_guess.part_of_speech": string;
  /** @description guess */
  "body.guess": definitions["guess"];
  /** Format: uuid */
  "rowFilter.guess.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.guess.created_at": string;
  /** Format: boolean */
  "rowFilter.guess.is_correct": string;
  /** Format: character varying */
  "rowFilter.guess.username": string;
  /** Format: uuid */
  "rowFilter.guess.room_id": string;
  /** Format: uuid */
  "rowFilter.guess.word_id": string;
  /** Format: uuid */
  "rowFilter.guess.puzzle_id": string;
  /** @description newest_puzzle */
  "body.newest_puzzle": definitions["newest_puzzle"];
  /** Format: uuid */
  "rowFilter.newest_puzzle.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.newest_puzzle.created_at": string;
  /** Format: date */
  "rowFilter.newest_puzzle.date": string;
  /** Format: ARRAY */
  "rowFilter.newest_puzzle.outer_letters": string;
  /** Format: character */
  "rowFilter.newest_puzzle.center_letter": string;
  /** Format: smallint */
  "rowFilter.newest_puzzle.max_score": string;
  /** @description puzzle */
  "body.puzzle": definitions["puzzle"];
  /** Format: uuid */
  "rowFilter.puzzle.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.puzzle.created_at": string;
  /** Format: date */
  "rowFilter.puzzle.date": string;
  /** Format: ARRAY */
  "rowFilter.puzzle.outer_letters": string;
  /** Format: character */
  "rowFilter.puzzle.center_letter": string;
  /** Format: smallint */
  "rowFilter.puzzle.max_score": string;
  /** @description room */
  "body.room": definitions["room"];
  /** Format: uuid */
  "rowFilter.room.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.room.created_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.room.last_played": string;
  /** Format: character varying */
  "rowFilter.room.shortcode": string;
  /** Format: character varying */
  "rowFilter.room.name": string;
  /** @description word */
  "body.word": definitions["word"];
  /** Format: uuid */
  "rowFilter.word.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.word.created_at": string;
  /** Format: character varying */
  "rowFilter.word.word": string;
  /** Format: smallint */
  "rowFilter.word.point_value": string;
  /** Format: boolean */
  "rowFilter.word.is_pangram": string;
  /** Format: text */
  "rowFilter.word.definition": string;
  /** Format: character varying */
  "rowFilter.word.part_of_speech": string;
  /** Format: uuid */
  "rowFilter.word.puzzle_id": string;
};

export type operations = {};

export type external = {};

export type CorrectGuess = definitions["correct_guess"];

export type Guess = definitions["guess"];

export type NewestPuzzle = definitions["newest_puzzle"];

export type Puzzle = definitions["puzzle"];

export type Room = definitions["room"];

export type Word = definitions["word"];